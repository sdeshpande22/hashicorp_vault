from fastapi import FastAPI, Form, UploadFile, File, HTTPException
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
import requests
from bs4 import BeautifulSoup
from docx import Document  # For reading DOCX files
import fitz  # PyMuPDF for reading PDF files

app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")

# Serve the HTML page as the root endpoint
@app.get("/", response_class=HTMLResponse)
async def get_form():
    with open("templates/index.html") as file:
        return HTMLResponse(content=file.read())

@app.post("/upload")
async def upload_file(file: UploadFile = File(...)):
    # Check the file type and process accordingly
    if file.content_type == "text/plain":
        text = await file.read()
        text = text.decode("utf-8")
    elif file.content_type == "application/pdf":
        text = await extract_text_from_pdf(file)
    elif file.content_type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
        text = await extract_text_from_docx(file)
    else:
        raise HTTPException(status_code=400, detail="Unsupported file type. Only TXT, PDF, and DOCX files are supported.")

    processed_text = process_bionic_reader(text)
    summary = generate_summary(text)
    return {"bionic_text": processed_text, "summary": summary}

# Helper function to extract text from PDF
async def extract_text_from_pdf(file: UploadFile):
    text = ""
    with fitz.open(stream=await file.read(), filetype="pdf") as pdf:
        for page in pdf:
            text += page.get_text()
    return text

# Helper function to extract text from DOCX
async def extract_text_from_docx(file: UploadFile):
    text = ""
    with open("/tmp/temp.docx", "wb") as f:
        f.write(await file.read())
    doc = Document("/tmp/temp.docx")
    for paragraph in doc.paragraphs:
        text += paragraph.text + "\n"
    return text

# Existing helper functions for Bionic Reader and summary generation
def process_bionic_reader(text):
    return " ".join(f"<b>{word[:len(word) // 2]}</b>{word[len(word) // 2:]}" for word in text.split())

def generate_summary(text):
    words = text.split()
    unique_words = list(set(words))
    return unique_words
