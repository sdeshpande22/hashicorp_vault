import calendar
from datetime import datetime

def get_maintenance_window(year=None, month=None, weekday=None, weeks_needed=None):
    """
    Get the occurrences of a specified weekday in a given month and year for maintenance windows.
    
    :param year: The year of the desired month. If None, uses the current year.
    :param month: The month of the desired year. If None, uses the current month.
    :param weekday: The day of the week as a string (e.g., "Monday", "Tuesday", etc.).
    :param weeks_needed: A list or comma-separated string of week numbers to retrieve (e.g., "2,3").
    :return: A list of dates for the specified occurrences of the weekday.
    """
    
    # Ensure weekday is provided and convert it to corresponding integer
    if weekday is None:
        raise ValueError("Please specify a weekday as a string (e.g., 'Tuesday').")
    
    try:
        weekday = list(calendar.day_name).index(weekday)
    except ValueError:
        raise ValueError("Invalid weekday. Please enter a valid weekday name (e.g., 'Monday').")
    
    # Ensure weeks_needed is provided and convert it to a list of integers if given as a comma-separated string
    if weeks_needed is None:
        raise ValueError("Please specify weeks_needed as a list or comma-separated string (e.g., '2,3').")
    
    if isinstance(weeks_needed, str):
        weeks_needed = [int(week.strip()) for week in weeks_needed.split(",")]

    if not all(isinstance(week, int) and week > 0 for week in weeks_needed):
        raise ValueError("Invalid weeks_needed. All week numbers must be positive integers.")
    
    # Use the current year and month if they are not specified by the user
    if year is None or month is None:
        today = datetime.today()
        year = year or today.year
        month = month or today.month

    # Determine the total number of days in the specified month
    total_days = calendar.monthrange(year, month)[1]
    
    # Initialize a list to hold the maintenance dates that match the specified weekday and week number
    maintenance_dates = []
    found_weeks = set()
    
    # Iterate through each day of the month
    for day in range(1, total_days + 1):
        date = datetime(year, month, day)
        
        # Check if the current date's weekday matches the specified weekday
        if date.weekday() == weekday:
            week_number = (day - 1) // 7 + 1
            if week_number in weeks_needed:
                maintenance_dates.append(date)
            found_weeks.add(week_number)

    # Determine the maximum number of weeks in the month
    first_day_of_month = datetime(year, month, 1).weekday()
    max_weeks = (total_days + first_day_of_month + 6) // 7

    # Validate that each requested week in weeks_needed is valid
    for week in weeks_needed:
        if week > max_weeks:
            raise ValueError(f"Invalid week number {week}. The maximum number of weeks in {calendar.month_name[month]} {year} is {max_weeks}.")
        if week not in found_weeks:
            raise ValueError(f"Week number {week} does not contain the specified weekday in {calendar.month_name[month]} {year}.")

    return maintenance_dates

# Example usage with arguments passed during function call
try:
    maintenance_windows = get_maintenance_window(year=2024, month=10, weekday="Tuesday", weeks_needed="2,3,5")
    for date in maintenance_windows:
        print(f"Maintenance window on {date.strftime('%A, %Y-%m-%d')}")

except ValueError as e:
    print(f"Error: {e}")
