function Upload-ADMFileToNitro
{
    <#
    .SYNOPSIS
        Upload a .tgz file to Citrix ADM.
    .DESCRIPTION
        This function uploads a .tgz file to Citrix ADM using the Nitro API.
    .PARAMETER ADMSession
        An existing custom ADM Neb Request Session object returned by Connect-ADM
    .PARAMETER FilePath
        Path to the .tgz file to be uploaded.
    .PARAMETER ResourceType
        Type of the resource where the file will be uploaded (e.g., ns_images).
    .PARAMETER ResourceName
        Optional name of the resource.
    .EXAMPLE
        Upload-ADMFileToNitro -ADMSession $Session -FilePath "C:\path\to\file.tgz" -ResourceType ns_image
    #>
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [PSObject]$ADMSession,
        [Parameter(Mandatory = $true)]
        [ValidateScript({Test-Path $_ -PathType Leaf})]
        [string]$FilePath,
        [Parameter(Mandatory = $true)]
        [ValidateSet("ns_images", "other_supported_resource_types")]
        [string]$ResourceType,
        [Parameter(Mandatory = $false)]
        [string]$ResourceName
    )

    Write-Verbose "$($MyInvocation.MyCommand): Enter"

    try
    {
        # Generate a unique boundary string
        $boundary = [guid]::NewGuid().ToString()

        # Build payload for file upload
        $Payload = @{
            "NITRO_WEB_APPLICATION" = "true"
        }

        # Prepare the multipart/form-data body
        $bodyStart = @"
--$boundary
Content-Disposition: form-data; name="NITRO_WEB_APPLICATION"

true
--$boundary
Content-Disposition: form-data; name="rand_key"

$boundary
--$boundary
Content-Disposition: form-data; name="$ResourceType"; filename="$([System.IO.Path]::GetFileName($FilePath))"
Content-Type: application/x-compressed

"@
        $bodyEnd = @"
--$boundary--
"@

        # Call Invoke-ADMNitro with appropriate parameters
        $response = Invoke-ADMNitro -ADMSession $ADMSession `
                                    -OperationMethod POST `
                                    -ResourceType $ResourceType `
                                    -ResourceName $ResourceName `
                                    -InFile $FilePath `
                                    -ContentType "multipart/form-data; boundary=$boundary" `
                                    -BodyStart $bodyStart `
                                    -BodyEnd $bodyEnd `
                                    -Payload $Payload

        # Handle response if needed
        if ($response)
        {
            if ($response.severity -eq "ERROR")
            {
                throw "Error. See response:`n$($response | Format-List * | Out-String)"
            }
            else
            {
                Write-Verbose "File uploaded successfully.`n$(ConvertTo-Json $response | Out-String)"
            }
        }
    }
    catch [Exception]
    {
        throw $_
    }

    Write-Verbose "$($MyInvocation.MyCommand): Exit"
}
