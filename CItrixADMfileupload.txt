$file_path = "C:\path\to\your\file\largefile.tar.gz"
$admIp = "<ADM-IP>"

# URL for the authentication and upload endpoints
$authUrl = "https://$admIp/nitro/v2/config/login"
$uploadUrl = "https://$admIp/nitro/v2/config/ns_image?action=upload"

# Credentials for authentication
$username = "your-username"
$password = "your-password"

try {
    # Step 1: Authenticate and Obtain Session ID
    $authBody = @{
        username = $username
        password = $password
    } | ConvertTo-Json

    # Send authentication request
    $authResponse = Invoke-WebRequest -Uri $authUrl -Method Post -Body $authBody -ContentType "application/json"
    $authResponseJson = $authResponse.Content | ConvertFrom-Json
    $sessionId = $authResponseJson.sessionid

    if ($null -eq $sessionId) {
        Write-Output "Failed to obtain session ID. Response: $($authResponse.Content)"
        exit
    }

    Write-Output "Obtained session ID: $sessionId"

    # Step 2: Upload File Using Session ID
    $fileSize = (Get-Item $file_path).Length

    # Prepare headers
    $headers = @{
        "X-Nitro-User" = $username
        "X-Nitro-Password" = $password
        "Cookie" = "NITRO_AUTH_TOKEN=$sessionId"
    }

    # Create the file content
    $fileContent = [System.IO.File]::ReadAllBytes($file_path)
    $fileStream = [System.IO.MemoryStream]::new()
    $fileStream.Write($fileContent, 0, $fileContent.Length)
    $fileStream.Seek(0, [System.IO.SeekOrigin]::Begin)

    # Create MultipartFormDataContent
    $boundary = [System.Guid]::NewGuid().ToString()
    $multipartContent = "--$boundary`r`n"
    $multipartContent += "Content-Disposition: form-data; name=`"file`"; filename=`"$(Split-Path $file_path -Leaf)`"`r`n"
    $multipartContent += "Content-Type: application/octet-stream`r`n`r`n"
    $multipartContent += [System.Text.Encoding]::UTF8.GetString($fileContent)
    $multipartContent += "`r`n--$boundary--`r`n"

    # Convert multipart content to byte array
    $multipartBytes = [System.Text.Encoding]::UTF8.GetBytes($multipartContent)

    # Send the upload request
    $uploadResponse = Invoke-WebRequest -Uri $uploadUrl -Method Post -Body $multipartBytes -Headers $headers -ContentType "multipart/form-data; boundary=$boundary"

    # Log response details for debugging
    Write-Output "Response status code: $($uploadResponse.StatusCode)"
    Write-Output "Response content: $($uploadResponse.Content)"

    if ($uploadResponse.StatusCode -eq 200) {
        Write-Output "File uploaded successfully"
    } else {
        Write-Output "Failed to upload file. Status code: $($uploadResponse.StatusCode)"
        Write-Output "Response content: $($uploadResponse.Content)"
    }
} catch {
    Write-Output "Error uploading file: $_"
} finally {
    if ($fileStream) { $fileStream.Dispose() }
}
