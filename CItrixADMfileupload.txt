$file_path = "C:\path\to\your\file\largefile.tar.gz"

# URL for the upload endpoint
$url = "https://<ADM-IP>/nitro/v2/config/ns_image?action=upload"

# Credentials for headers
$nitroUser = "your-username"
$nitroPassword = "your-password"

# Function to report progress
function Report-Progress {
    param (
        [int64]$BytesTransferred,
        [int64]$TotalBytes
    )

    $percentComplete = ($BytesTransferred / $TotalBytes) * 100
    Write-Progress -Activity "Uploading File" -Status "Progress: $($percentComplete.ToString("F2"))% Complete" -PercentComplete $percentComplete
}

try {
    # Retrieve file size for progress calculation
    $fileSize = (Get-Item $file_path).Length
    $bytesUploaded = 0

    # Prepare headers
    $headers = @{
        "X-Nitro-User" = $nitroUser
        "X-Nitro-Password" = $nitroPassword
    }

    # Open file stream and BinaryReader
    $fileStream = [System.IO.File]::OpenRead($file_path)
    $binaryReader = New-Object System.IO.BinaryReader($fileStream)

    # Chunk size for reading file (adjust as necessary)
    $chunkSize = 1MB
    $buffer = New-Object byte[] $chunkSize

    # Initialize variables for progress tracking
    $totalBytesRead = 0
    $totalBytesToSend = $fileSize

    # Loop through file and upload in chunks
    while ($totalBytesRead -lt $fileSize) {
        # Read chunk from file
        $bytesRead = $binaryReader.Read($buffer, 0, $chunkSize)

        # Prepare body content (convert bytes to Base64)
        $body = [System.Convert]::ToBase64String($buffer, 0, $bytesRead)

        # Calculate progress
        $totalBytesRead += $bytesRead
        Report-Progress -BytesTransferred $totalBytesRead -TotalBytes $totalBytesToSend

        # Invoke-WebRequest to upload chunk
        $response = Invoke-WebRequest -Uri $url -Method Post -Headers $headers -ContentType "application/octet-stream" -Body $body -TimeoutSec 3600
    }

    # Close file stream and BinaryReader
    $fileStream.Close()
    $binaryReader.Close()

    Write-Output "File uploaded successfully"
} catch {
    Write-Output "Error uploading file: $_"
} finally {
    # Dispose of file stream and BinaryReader if still open
    if ($fileStream) { $fileStream.Dispose() }
    if ($binaryReader) { $binaryReader.Dispose() }
}
