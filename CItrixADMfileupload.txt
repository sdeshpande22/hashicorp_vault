$file_path = "C:\path\to\your\file\largefile.tar.gz"

# URL for the upload endpoint
$url = "https://<ADM-IP>/nitro/v2/config/ns_image?action=upload"

# Credentials for headers
$nitroUser = "your-username"
$nitroPassword = "your-password"

# Function to report progress
function Report-Progress {
    param (
        [int64]$BytesTransferred,
        [int64]$TotalBytes
    )

    $percentComplete = ($BytesTransferred / $TotalBytes) * 100
    Write-Progress -Activity "Uploading File" -Status "Progress: $($percentComplete.ToString("F2"))% Complete" -PercentComplete $percentComplete
}

try {
    # Retrieve file size for progress calculation
    $fileSize = (Get-Item $file_path).Length

    # Prepare headers
    $headers = @{
        "X-Nitro-User" = $nitroUser
        "X-Nitro-Password" = $nitroPassword
    }

    # Create a boundary for multipart content
    $boundary = [System.Guid]::NewGuid().ToString()
    $LF = "`r`n"
    $headers["Content-Type"] = "multipart/form-data; boundary=$boundary"

    # Initialize FileStream for reading the file
    $fileStream = [System.IO.File]::OpenRead($file_path)

    # Read the file in chunks and send it in parts
    $chunkSize = 1MB
    $buffer = New-Object byte[] $chunkSize
    $bytesRead = 0
    $totalBytesRead = 0

    while (($bytesRead = $fileStream.Read($buffer, 0, $chunkSize)) -gt 0) {
        # Create the multipart content for the chunk
        $chunkContent = (
            "--$boundary$LF" +
            "Content-Disposition: form-data; name=`"file`"; filename=`"$($file_path)`"$LF" +
            "Content-Type: application/octet-stream$LF$LF" +
            [System.Text.Encoding]::UTF8.GetString($buffer, 0, $bytesRead) + "$LF" +
            "--$boundary--$LF"
        )

        # Upload the chunk
        $response = Invoke-WebRequest -Uri $url -Method Post -Headers $headers -Body $chunkContent -Verbose

        # Update total bytes read and report progress
        $totalBytesRead += $bytesRead
        Report-Progress -BytesTransferred $totalBytesRead -TotalBytes $fileSize
    }

    # Close the FileStream
    $fileStream.Close()

    Write-Output "File uploaded successfully"
} catch {
    Write-Output "Error uploading file: $_"
} finally {
    # Dispose of FileStream if still open
    if ($fileStream) { $fileStream.Dispose() }
}
