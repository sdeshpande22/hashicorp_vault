function Upload-ADMFileToNitro
{
    <#
    .SYNOPSIS
        Upload a .tgz file to Citrix ADM.
    .DESCRIPTION
        This function uploads a .tgz file to Citrix ADM using the Nitro API.
    .PARAMETER ADMHost
        ADM Management address (e.g., https://adm.domain.local).
    .PARAMETER Cred
        Credential object to authenticate to ADM.
    .PARAMETER FilePath
        Path to the .tgz file to be uploaded.
    .PARAMETER ResourceType
        Type of the resource where the file will be uploaded (e.g., ns_images).
    .PARAMETER ResourceName
        Optional name of the resource.
    .EXAMPLE
        Upload-ADMFileToNitro -ADMHost "https://adm.domain.local" -Cred $Credential -FilePath "C:\path\to\file.tgz" -ResourceType ns_images
    #>
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$ADMHost,
        [Parameter(Mandatory = $true)]
        [Management.Automation.PSCredential]$Cred,
        [Parameter(Mandatory = $true)]
        [ValidateScript({Test-Path $_ -PathType Leaf})]
        [string]$FilePath,
        [Parameter(Mandatory = $true)]
        [ValidateSet("ns_images", "other_supported_resource_types")]
        [string]$ResourceType,
        [Parameter(Mandatory = $false)]
        [string]$ResourceName
    )

    Write-Verbose "$($MyInvocation.MyCommand): Enter"

    try
    {
        # Build login object
        $loginObject = @{
            "login" = @{
                "username" = $Cred.UserName.Replace("\", "")
                "password" = $Cred.GetNetworkCredential().Password
            }
        } | ConvertTo-Json

        # Perform login to obtain session
        $loginUri = "$ADMHost/nitro/v1/config/login"
        $loginResponse = Invoke-RestMethod -Uri $loginUri -Body $loginObject -Method POST -ContentType "application/json"

        # Check login response for errors
        if ($loginResponse.severity -eq "ERROR")
        {
            throw "Error logging in to ADM. See response:`n$(ConvertTo-Json $loginResponse | Out-String)"
        }

        # Extract session information
        $session = $loginResponse.sessionid

        # Generate boundary for multipart/form-data
        $boundary = [guid]::NewGuid().ToString()

        # Prepare the multipart/form-data body
        $bodyStart = @"
--$boundary
Content-Disposition: form-data; name="NITRO_WEB_APPLICATION"

true
--$boundary
Content-Disposition: form-data; name="rand_key"

$boundary
--$boundary
Content-Disposition: form-data; name="$ResourceType"; filename="$([System.IO.Path]::GetFileName($FilePath))"
Content-Type: application/x-compressed

"@
        $bodyEnd = @"
--$boundary--
"@

        # Prepare headers
        $headers = @{
            "Cookie" = "sessionid=$session"
            "Content-Type" = "multipart/form-data; boundary=$boundary"
        }

        # Construct URI for file upload
        $uploadUri = "$ADMHost/nitro/v1/$ResourceType/$ResourceName"

        # Read file content
        $fileContent = Get-Content -Path $FilePath -Raw

        # Perform the file upload
        $response = Invoke-RestMethod -Uri $uploadUri -Method POST -ContentType "multipart/form-data; boundary=$boundary" -Body ($bodyStart + $fileContent + $bodyEnd) -Headers $headers

        # Check response for errors
        if ($response.severity -eq "ERROR")
        {
            throw "Error uploading file to ADM. See response:`n$(ConvertTo-Json $response | Out-String)"
        }

        Write-Verbose "File uploaded successfully.`n$(ConvertTo-Json $response | Out-String)"
    }
    catch [Exception]
    {
        throw $_
    }

    Write-Verbose "$($MyInvocation.MyCommand): Exit"
}
