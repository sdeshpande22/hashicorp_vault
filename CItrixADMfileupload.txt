Add-Type -AssemblyName System.Net.Http

$file_path = "C:\path\to\your\file\archive.tgz"

# URL for the upload endpoint
$url = "https://<ADM-IP>/nitro/v2/config/ns_image?action=upload"

# Credentials for headers
$nitroUser = "your-username"
$nitroPassword = "your-password"

# Create a custom HttpClientHandler to ignore SSL certificate errors
$handler = New-Object System.Net.Http.HttpClientHandler
$handler.ServerCertificateCustomValidationCallback = { $true }

# Create a HttpClient instance with the custom handler
$httpClient = New-Object System.Net.Http.HttpClient($handler)

# Add custom headers to the HttpClient
$httpClient.DefaultRequestHeaders.Add("X-Nitro-User", $nitroUser)
$httpClient.DefaultRequestHeaders.Add("X-Nitro-Password", $nitroPassword)

# Create a MultipartFormDataContent object
$multipartContent = New-Object System.Net.Http.MultipartFormDataContent

# Create a FileStreamContent object for the file
$fileStream = [System.IO.File]::OpenRead($file_path)
$fileStreamContent = New-Object System.Net.Http.StreamContent($fileStream)
$fileStreamContent.Headers.ContentDisposition = [System.Net.Http.Headers.ContentDispositionHeaderValue]::new("form-data")
$fileStreamContent.Headers.ContentDisposition.Name = '"file"'
$fileStreamContent.Headers.ContentDisposition.FileName = '"' + [System.IO.Path]::GetFileName($file_path) + '"'
$fileStreamContent.Headers.ContentType = [System.Net.Http.Headers.MediaTypeHeaderValue]::new("application/gzip")

# Add the file content to the multipart content
$multipartContent.Add($fileStreamContent)

# Send the request
try {
    $response = $httpClient.PostAsync($url, $multipartContent).Result

    # Check the response
    if ($response.IsSuccessStatusCode) {
        Write-Output "File uploaded successfully"
    } else {
        Write-Output "Failed to upload file. Status code: $($response.StatusCode)"
        Write-Output "Response content: $($response.Content.ReadAsStringAsync().Result)"
    }
} catch {
    Write-Output "Error uploading file: $_"
} finally {
    # Dispose of the file stream and HttpClient
    $fileStream.Dispose()
    $httpClient.Dispose()
}
