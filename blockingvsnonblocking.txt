Yes, whether you use blocking or non-blocking code can depend on the API you're interacting with, specifically the following factors:

1. API Type (Synchronous vs Asynchronous)
Synchronous APIs: Many traditional APIs are synchronous by default. This means that you’ll send a request and wait for the server’s response before proceeding to the next task. With synchronous APIs, you often don't need to worry about non-blocking behavior because the API is designed to block the execution flow until it returns a response. For example, REST APIs or older APIs like SOAP might not have async support.

Asynchronous APIs: Some modern APIs, especially those designed for high-concurrency environments (like WebSockets or certain REST APIs), are built with asynchronous behavior in mind. They are designed to handle multiple requests concurrently without blocking the execution thread. For such APIs, non-blocking code (using asyncio, aiohttp, etc.) is more efficient because you can send multiple requests and get responses without waiting for each one.

2. Request Method (GET, POST, PUT, DELETE, etc.)
The method used (GET, POST, PUT, DELETE) does not typically dictate whether the request is blocking or non-blocking. Rather, it's the underlying library or framework that determines whether the operation will block.
GET and POST requests can both be blocking or non-blocking, depending on how they are implemented in your code.
However, in high-concurrency situations (e.g., making thousands of HTTP requests), it’s better to use non-blocking requests to ensure that your program can proceed with other tasks instead of waiting for each HTTP response.
3. Response Time
Long-Running APIs: If you are interacting with APIs that have long response times, using non-blocking calls can significantly improve your program’s performance. Without non-blocking, the program would be forced to wait for each request, which might lead to poor user experience or slow performance, especially in cases where multiple API calls are involved.
Fast APIs: If the APIs respond quickly, you may not notice much difference between blocking and non-blocking behavior. However, non-blocking can still provide benefits if you plan to scale or if your program needs to handle many concurrent requests.
4. API Rate Limiting
Some APIs have rate limiting rules that restrict how many requests can be made in a certain period. In such cases, non-blocking code could allow you to handle responses more efficiently while respecting rate limits. You could use async code to implement strategies like waiting between requests or queuing requests, allowing you to handle the API more gracefully.
5. Library Support
Some libraries or frameworks might support asynchronous functionality for certain APIs. For instance:
requests: The requests library is blocking by default.
httpx or aiohttp: These libraries support non-blocking (asynchronous) HTTP requests, which can be useful for APIs that are designed to handle many concurrent requests.
Async Libraries: If you're working with APIs that support asynchronous operations (e.g., WebSockets, gRPC, etc.), using an async framework such as aiohttp or httpx can be beneficial to prevent blocking your program while waiting for responses.
6. Error Handling
Non-blocking code often requires more advanced error handling mechanisms to ensure that requests are retried or handled asynchronously. With blocking APIs, error handling can be simpler since the program stops until the response is received. However, in a non-blocking setup, managing exceptions and retries can require more sophisticated logic, especially if the API's responses are unpredictable.
Summary:
Blocking is typically used with synchronous APIs and simple workflows where you don’t need to handle multiple tasks at once.
Non-blocking is useful when interacting with APIs that support asynchronous behavior or when you need to perform multiple I/O operations concurrently, making it more efficient in high-concurrency situations or APIs with slower response times.
Thus, whether you use blocking or non-blocking code can depend on:

The type of API (synchronous vs asynchronous).
The API’s response time and rate limits.
The library you use (some support async calls, some don't).
If the API is designed to be used asynchronously, like those with async support, or if you need to optimize for concurrent requests, non-blocking code is the better choice.
