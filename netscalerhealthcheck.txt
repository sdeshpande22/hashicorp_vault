function Get-ADMInstanceDetails {
    param (
        [string]$admIP,
        [string]$username,
        [string]$password,
        [string]$instanceIP,
        [int]$memoryThreshold = 80,
        [int]$diskThreshold = 85,
        [int]$packetCpuThreshold = 70,
        [int]$mgmtCpuThreshold = 70
    )

    # Define the headers for the Nitro API request
    $headers = @{
        'X-NITRO-USER' = $username
        'X-NITRO-PASS' = $password
        'Content-Type' = 'application/json'
    }

    # Fetch the instance score from the ADM API
    $url = "https://$admIP/nitro/v1/config/instance_score?args=IPAddress:$instanceIP"
    $response = Invoke-RestMethod -Uri $url -Method Get -Headers $headers -SkipCertificateCheck

    # Extract relevant data
    $instanceScore = $response.instance_score[0]
    $indicators = @{
        "Flash Error" = $instanceScore.ind_flash_error
        "CPU Usage" = $instanceScore.ind_cpu_used
        "Power Error" = $instanceScore.ind_power_error
        "CPU Capacity Event" = $instanceScore.ind_capacity_cpu
        "Memory Usage" = $instanceScore.ind_memory_used
        "Disk Usage" = $instanceScore.ind_disk_used
        "Pooled License Events" = $instanceScore.ind_pooled_license_events
        "SSL Card Error" = $instanceScore.ind_ssl_card_error
        "Memory Capacity Event" = $instanceScore.ind_capacity_mem
    }

    # Data metrics with thresholds
    $dataMetrics = @{
        "Data Memory Used (%)" = @{
            "value" = $instanceScore.data_memory_used
            "threshold" = $memoryThreshold
        }
        "Disk0 Used Space (%)" = @{
            "value" = $instanceScore.data_disk0_used
            "threshold" = $diskThreshold
        }
        "Disk1 Used Space (%)" = @{
            "value" = $instanceScore.data_disk1_used
            "threshold" = $diskThreshold
        }
        "Packet CPU Usage (%)" = @{
            "value" = $instanceScore.data_cpu_used_packet
            "threshold" = $packetCpuThreshold
        }
        "Management CPU Usage (%)" = @{
            "value" = $instanceScore.data_cpu_used_mgmt
            "threshold" = $mgmtCpuThreshold
        }
    }

    # Display the results
    Write-Output "ADM Instance Health Check for $instanceIP:"
    Write-Output "=========================================="

    # Evaluate and print the indicators
    foreach ($key in $indicators.Keys) {
        $value = $indicators[$key]
        switch ($value) {
            0 { Write-Output "$key: No errors (0)" }
            1 { Write-Output "WARNING: $key - Error detected (1)" }
            -1 { Write-Output "$key: Not-Applicable/Unknown (-1)" }
            default { Write-Output "$key: Unknown value ($value)" }
        }
    }

    # Print and evaluate the data metrics against thresholds
    Write-Output "`nData Metrics:"
    foreach ($key in $dataMetrics.Keys) {
        $metric = $dataMetrics[$key]
        $value = $metric["value"]
        $threshold = $metric["threshold"]

        if ($value -ge $threshold) {
            Write-Output "WARNING: $key is at $value% (Threshold: $threshold%)"
        } else {
            Write-Output "$key: $value% (Normal)"
        }
    }
}

# Example usage of the function
Get-ADMInstanceDetails -admIP "192.168.1.2" -username "your_adm_username" -password "your_adm_password" -instanceIP "192.168.1.1"
