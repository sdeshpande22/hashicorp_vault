#1. To download CSV file
import requests
from requests.auth import HTTPBasicAuth
import urllib.parse

# ====== CONFIGURATION ======
report_server_url = "http://your-server/ReportServer"  # Replace with your actual SSRS ReportServer URL
report_path = "/ConfigMgr_SRV/HSBCCustom/Compliance - specific compliance for an update list for a given Machine"
machine_name = "MACHINE001"  # Replace with actual machine name
username = "DOMAIN\\your_username"
password = "your_password"

# ====== BUILD REPORT URL ======
encoded_path = urllib.parse.quote(report_path)
report_url = f"{report_server_url}?{encoded_path}"

# ====== REPORT PARAMETERS ======
params = {
    "Machine": machine_name,     # confirmed parameter name
    "rs:Format": "CSV",          # export format
    "rs:Command": "Render"       # tells SSRS to render the report
}

# ====== DOWNLOAD REPORT ======
response = requests.get(report_url, params=params, auth=HTTPBasicAuth(username, password))

# ====== SAVE CSV FILE ======
if response.status_code == 200:
    with open("compliance_report.csv", "wb") as f:
        f.write(response.content)
    print("CSV report downloaded successfully as 'compliance_report.csv'")
else:
    print(f"Failed to download report: {response.status_code}")
    print(response.text)



###############################################################################################################
#2. Python Script to Discover Parameters

import requests
from requests.auth import HTTPBasicAuth
import urllib.parse
import xml.etree.ElementTree as ET

# ====== CONFIGURATION ======
report_server_url = "http://your-server/ReportServer"  # Your SSRS URL
report_path = "/ConfigMgr_SRV/HSBCCustom/Compliance - specific compliance for an update list for a given Machine"
username = "DOMAIN\\your_username"
password = "your_password"

# ====== BUILD URL ======
encoded_path = urllib.parse.quote(report_path)
param_url = f"{report_server_url}?{encoded_path}&rs:Command=GetParameters"

# ====== FETCH PARAMETERS ======
response = requests.get(param_url, auth=HTTPBasicAuth(username, password))

if response.status_code == 200:
    # Parse XML response
    root = ET.fromstring(response.content)
    print("Available Parameters:")
    for param in root.findall(".//Parameter"):
        name = param.find("Name").text
        print(f" - {name}")
else:
    print(f"‚ùå Failed to fetch parameters: {response.status_code}")
    print(response.text)
