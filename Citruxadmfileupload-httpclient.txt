$file_path = "C:\path\to\your\file\largefile.tar.gz"
$admIp = "<ADM-IP>"

# URL for the authentication and upload endpoints
$authUrl = "https://$admIp/nitro/v2/config/login"
$uploadUrl = "https://$admIp/nitro/v2/config/ns_image?action=upload"

# Credentials for authentication
$username = "your-username"
$password = "your-password"

# Function to report progress
function Report-Progress {
    param (
        [int64]$BytesTransferred,
        [int64]$TotalBytes
    )

    $percentComplete = ($BytesTransferred / $TotalBytes) * 100
    Write-Progress -Activity "Uploading File" -Status "Progress: $($percentComplete.ToString("F2"))% Complete" -PercentComplete $percentComplete
}

try {
    # Step 1: Authenticate and Obtain Session ID
    $authBody = @{
        username = $username
        password = $password
    } | ConvertTo-Json

    # Create HttpClient for authentication
    $authClient = New-Object System.Net.Http.HttpClient
    $authContent = New-Object System.Net.Http.StringContent($authBody, [System.Text.Encoding]::UTF8, "application/json")

    # Send authentication request
    $authResponse = $authClient.PostAsync($authUrl, $authContent).Result
    $authResponseContent = $authResponse.Content.ReadAsStringAsync().Result

    # Parse session ID from response
    $authResponseJson = $authResponseContent | ConvertFrom-Json
    $sessionId = $authResponseJson.sessionid

    # Dispose of auth client
    $authClient.Dispose()

    if ($null -eq $sessionId) {
        Write-Output "Failed to obtain session ID. Response: $authResponseContent"
        exit
    }

    Write-Output "Obtained session ID: $sessionId"

    # Step 2: Upload File Using Session ID
    $fileSize = (Get-Item $file_path).Length

    # Prepare headers
    $headers = @{
        "X-Nitro-User" = $username
        "X-Nitro-Password" = $password
        "Cookie" = "NITRO_AUTH_TOKEN=$sessionId"
    }

    # Create HttpClient for file upload
    $httpClient = New-Object System.Net.Http.HttpClient
    $multipartContent = New-Object System.Net.Http.MultipartFormDataContent

    # Open file stream
    $fileStream = [System.IO.File]::OpenRead($file_path)
    $streamContent = New-Object System.Net.Http.StreamContent($fileStream)
    $streamContent.Headers.ContentType = [System.Net.Http.Headers.MediaTypeHeaderValue]::new("application/octet-stream")
    $streamContent.Headers.ContentDisposition = [System.Net.Http.Headers.ContentDispositionHeaderValue]::new("form-data")
    $streamContent.Headers.ContentDisposition.Name = "file"
    $streamContent.Headers.ContentDisposition.FileName = [System.IO.Path]::GetFileName($file_path)

    # Add stream content to multipart content
    $multipartContent.Add($streamContent)

    # Create HttpRequestMessage
    $requestMessage = [System.Net.Http.HttpRequestMessage]::new([System.Net.Http.HttpMethod]::Post, $uploadUrl)
    $requestMessage.Content = $multipartContent
    foreach ($header in $headers.GetEnumerator()) {
        $requestMessage.Headers.Add($header.Key, $header.Value)
    }

    # Log the request details
    Write-Output "Sending request to $uploadUrl"
    Write-Output "Headers: $headers"
    Write-Output "File: $file_path"
    Write-Output "File size: $fileSize bytes"

    # Send the request
    $response = $httpClient.SendAsync($requestMessage, [System.Net.Http.HttpCompletionOption]::ResponseHeadersRead).Result
    $responseContent = $response.Content.ReadAsStringAsync().Result

    # Log response details for debugging
    Write-Output "Response status code: $($response.StatusCode)"
    Write-Output "Response content: $responseContent"

    if ($response.IsSuccessStatusCode) {
        Write-Output "File uploaded successfully"
    } else {
        Write-Output "Failed to upload file. Status code: $($response.StatusCode)"
        Write-Output "Response content: $responseContent"
    }
} catch {
    Write-Output "Error uploading file: $_"
} finally {
    # Dispose of resources
    if ($fileStream) { $fileStream.Dispose() }
    if ($httpClient) { $httpClient.Dispose() }
}
