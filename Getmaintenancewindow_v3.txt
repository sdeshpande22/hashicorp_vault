import calendar
from datetime import datetime, time, timezone

def get_maintenance_window(weeks_needed, year=None, month=None, weekday=None, time_utc=None):
    """
    Get the occurrences of a specified weekday in a given month and year for maintenance windows in UTC.
    
    :param weeks_needed: A list or comma-separated string of week numbers to retrieve (e.g., "2,3").
    :param year: The year of the desired month. If None, uses the current year.
    :param month: The month of the desired year. If None, uses the current month.
    :param weekday: The day of the week as a string (e.g., "Monday", "Tuesday", etc.). If None, uses the current weekday.
    :param time_utc: A tuple specifying the hour and minute for the maintenance window in UTC (e.g., (10, 30)). Defaults to 00:00 UTC.
    :return: A list of datetime objects in UTC for the specified occurrences of the weekday with the given time.
    """
    
    # Use the current year, month, and weekday if they are not specified by the user
    today = datetime.today()
    year = year or today.year
    month = month or today.month
    weekday = weekday or today.strftime("%A")

    # Set default time to 00:00 if time_utc is not provided
    time_obj = time(*time_utc) if time_utc else time(0, 0)

    # Convert weekday string (e.g., "Monday") to corresponding integer (e.g., 0 for Monday)
    try:
        weekday = list(calendar.day_name).index(weekday)
    except ValueError:
        raise ValueError("Invalid weekday. Please enter a valid weekday name (e.g., 'Monday').")
    
    # Ensure weeks_needed is provided and convert it to a list of integers if given as a comma-separated string
    if isinstance(weeks_needed, str):
        # Split the string by commas and convert each item to an integer
        weeks_needed = [int(week.strip()) for week in weeks_needed.split(",")]

    # Validate that all items in weeks_needed are positive integers
    if not all(isinstance(week, int) and week > 0 for week in weeks_needed):
        raise ValueError("Invalid weeks_needed. All week numbers must be positive integers.")
    
    # Get the total number of days in the specified month
    total_days = calendar.monthrange(year, month)[1]
    
    # Initialize a list to hold the maintenance dates that match the specified weekday and week number
    maintenance_dates = []
    found_weeks = set()  # Track found weeks to ensure they contain the specified weekday
    
    # Iterate through each day of the month
    for day in range(1, total_days + 1):
        # Create a date object for the current day
        date = datetime(year, month, day)
        
        # Check if the current date's weekday matches the specified weekday
        if date.weekday() == weekday:
            # Calculate the week number of the current date in the month (1-based index)
            week_number = (day - 1) // 7 + 1
            
            # If the week number is in weeks_needed, add the date with the specified time to maintenance_dates
            if week_number in weeks_needed:
                # Combine the date with the specified time and set to UTC
                maintenance_datetime = datetime.combine(date, time_obj).replace(tzinfo=timezone.utc)
                maintenance_dates.append(maintenance_datetime)
            
            # Add the week number to found_weeks to confirm it contains the specified weekday
            found_weeks.add(week_number)

    # Calculate the maximum possible weeks in the month
    first_day_of_month = datetime(year, month, 1).weekday()  # Get the weekday of the 1st day of the month
    max_weeks = (total_days + first_day_of_month + 6) // 7  # Calculate max weeks based on month length and start day

    # Validate that each requested week in weeks_needed is within the range of possible weeks
    for week in weeks_needed:
        if week > max_weeks:
            raise ValueError(f"Invalid week number {week}. The maximum number of weeks in {calendar.month_name[month]} {year} is {max_weeks}.")
        if week not in found_weeks:
            raise ValueError(f"Week number {week} does not contain the specified weekday in {calendar.month_name[month]} {year}.")

    return maintenance_dates

# Example usage with time_utc parameter in UTC
try:
    maintenance_windows = get_maintenance_window(weeks_needed="2,3", time_utc=(10, 30))
    for date in maintenance_windows:
        print(f"Maintenance window on {date.strftime('%A, %Y-%m-%d %H:%M %Z')}")

except ValueError as e:
    print(f"Error: {e}")
